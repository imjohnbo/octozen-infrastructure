# An example workflow using the `remote` backend with `name`.
# https://github.com/hashicorp/terraform-github-actions/blob/master/examples/pull_request_remote_backend_name/.github/workflows/example.yml
name: 'Terraform Plan'
on:
  - pull_request

jobs:
  remote:
    name: 'Terraform Actions'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@master
      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: 0.12.13
          tf_actions_subcommand: 'init'
          tf_actions_comment: true
          args: '-var="netlify_token=${{ secrets.NETLIFY_TOKEN }}"'
        env:
          # TF_CLI_ARGS_init is used to pass the backend configuration to the run.
          # This way is chosen to replicate how one would use the `remote` backend with Terraform Cloud/Enterprise via automation.
          TF_CLI_ARGS_init: '-backend-config="token=${{ secrets.TFP_TOKEN }}"'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Terraform Plan'
        uses: hashicorp/terraform-github-actions@v0.8.0
        with:
          tf_actions_version: 0.12.13
          tf_actions_subcommand: 'plan'
          tf_actions_comment: true
          args: '-var="netlify_token=${{ secrets.NETLIFY_TOKEN }}"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
